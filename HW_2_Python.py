"""
1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя, а указать
явно, в программе.
"""
my_list = [1, 2, "y", None, True, {1: 3}, (1, 2), [4, 5, 678]]
for i in my_list:
    print(i, type(i))

"""
2. Для списка реализовать обмен значений соседних элементов, т.е. Значениями обмениваются элементы с индексами 0 и 1, 2 
и 3 и т.д. При нечетном количестве элементов последний сохранить на своем месте. 
Для заполнения списка элементов необходимо использовать функцию input().
"""
my_list2 = input('Введите элементы списка: ').split()
print(my_list2)
for i in range(1, len(my_list2), 2):
    my_list2[i-1], my_list2[i] = my_list2[i], my_list2[i-1]
print(my_list2)

"""
3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к какому времени года относится месяц (зима, 
весна, лето, осень). Напишите решения через list и через dict.
"""
year = {'Весна': (3, 4, 5), 'Лето': (6, 7, 8), 'Осень': (9, 10, 11), 'Зима': (12, 1, 2)}

month = int(input('Номер месяца: '))
for key in year.keys():
    if month in year[key]:
        print(key)

year_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
month = int(input('Номер месяца: '))
if month == 1 or month == 2 or month == 12:
    print('Зима')
elif month == 3 or month == 4 or month == 5:
    print('Весна')
elif month == 6 or month == 7 or month == 8:
    print('Лето')
elif month == 9 or month == 10 or month == 11:
    print('Осень')
else:
    print('Такого номера месяца не существует')

"""
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
Строки необходимо пронумеровать. Если в слово длинное, выводить только первые 10 букв в слове.
"""
user_string = input('Любая строка с пробелами: ')
for index, word in enumerate(user_string.split(' ')):
    print((index+1), word[:11])

"""
5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий набор натуральных чисел. У пользователя 
необходимо запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то новый 
элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].
"""

my_list = [7, 5, 3, 3, 2, int(input('Введите число от 1 до 10: '))]
print(sorted(my_list, reverse=True))

"""
6. * Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. Каждый кортеж хранит 
информацию об отдельном товаре. В кортеже должно быть два элемента — номер товара и словарь с параметрами 
(характеристиками товара: название, цена, количество, единица измерения). Структуру нужно сформировать программно, т.е. 
запрашивать все данные у пользователя.
Пример готовой структуры:
[
(1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
(2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}), 
(3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
]
Необходимо собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например 
название, а значение — список значений-характеристик, например список названий товаров.
Пример:
{
“название”: [“компьютер”, “принтер”, “сканер”],
“цена”: [20000, 6000, 2000],
“количество”: [5, 2, 7],
“ед”: [“шт.”]
}
"""