from itertools import count, cycle
from functools import reduce
from sys import argv

"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета для
конкретных значений необходимо запускать скрипт с параметрами.
"""

script_name, first_param, second_param, third_param = argv
script_name = "Зарплата"
print(script_name, (float(first_param) * float(second_param)) + (float(first_param) * float(second_param) *
                                                                 float(third_param) / 100))

"""
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

old_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [old_list[i] for i in range(1, len(old_list)) if old_list[i] > old_list[i-1]]
print(new_list)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
"""

my_list = [number for number in range(20, 241) if number%20 == 0 or number%21 == 0]
print(my_list)

"""
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, 
соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания 
обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

old_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [i for i in old_list if old_list.count(i) == 1]
print(new_list)

"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные
 числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""


def multiplication(prev_el, el):
    return prev_el * el


print(reduce(multiplication, [x for x in range(100, 1001) if x % 2 == 0]))

"""
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен 
быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также 
необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

# а) итератор, генерирующий целые числа, начиная с 3
for i in count(3, 1):
    if i >= 10:
        break
    else:
        print(i)

# б) итератор, повторяющий элементы некоторого списка, определенного заранее - [1,2,3,4,5]
my_list = [1, 2, 3, 4, 5]
counter = 1
for i in cycle(my_list):
    if counter > 15:
        break
    print(i)
    counter += 1

"""
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции 
должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает 
за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""


def fact(n):
    if n == 0:
        return 1
    else:
        return n * fact(n-1)


def gen_fact(n):
    for el in range(1, n+1):
        yield fact(el)


my_fact = gen_fact(4)
print(next(my_fact))
print(next(my_fact))
print(next(my_fact))
print(next(my_fact))

print(type(my_fact))
